#include <iostream>
#include <queue>
#include <vector>
using namespace std;
long long countOperationsToEmptyArray(vector<int>& nums) {
    priority_queue<int, vector<int>, greater<int>> pq;
    long long count = 0;
    for(int x: nums) {
        pq.push(x);
    }
    while(!pq.empty()) {
        if(pq.top() == nums[0]) {
            nums.erase(nums.begin());
            pq.pop();
        }
        else {
            int temp = nums[0]; // extract
            nums.erase(nums.begin()); // delete from front
            nums.push_back(temp); // insert at last
        } 
        count++;
    }
    return count;
}
int main() {
    // priority_queue<int, vector<int>, greater<int>> pq;
    // pq.push(5);
    // pq.push(7);
    // pq.push(1);
    // pq.push(3);
    // pq.push(8);
    // while(!pq.empty()){
    //     cout << pq.top() << " ";
    //     pq.pop();
    // }
    // vector <int> arr;
    // arr.push_back(5);
    // arr.push_back(4);
    // arr.push_back(3);
    // // 5 4 3
    // arr.erase(arr.begin());
    
    // for(int x: arr) {
    //     cout << x << " ";
    // }
    vector<int> nums = {-505,92,999,-223,-530,987,-207,-377,-326,910,671,621,176,-810,-200,-340,88,-159,329,28,-917,772,950,528,-873,275,866,337,-27,-783,-867,121,-283,-667,-69,-603,-486,-264,964,445,-655,-550,-623,225,-852,699,-414,624,279,-56,-122,-478,-250,-774,8,313,933,-722,19,-310,633,-248,-508,-398,-562,320,-598,-18,-966,-164,-621,-115,282,402,620,384,-632,-243,-171,408,-331,888,-841,842,-167,-523,-275,-9,-767,44,565,-798,-106,777,845,432,-477,-459,-575,-815,447,165,971,-545,221,-629,-735,331,-561,-186,-161,-124,-99,-114,-674,469,434,-592,-640,-827,405,510,208,-249,531,-572,-189,288,607,-34,-463,563,-337,85,241,47,363,885,-647,-531,-527,-13,596,-668,-580,-501,-78,229,15,890,485,611,-100,-958,-448,744,498,-219,696,850,147,193,546,-915,773,-998,110,648,397,-692,-500,-583,-433,101,-58,631,-732,-281,742,-21,-440,-407,883,478,608,574,520,722,-905,990,-666,-480,441,660,-734,645,837,438,514,-266,161,-290,952,-542,137,819,892,852,-937,749,-193,1000,-102,-235,503,-839,-871,-805,-882,889,217,-111,-378,233,-613,419,-311,996,23,-422,578,-196,592,-412,747,242,338,-742,521,678,-314,864,444,174,276,-329,-366,-532,708,-285,480,311,591,721,809,-738,466,668,-962,452,236,-633,294,602,-461,974,-930,554,-460,-263,-128,-399,-895,-299,-163,63,-946,617,-147,833,-551,-547,374,701,-812,327,-365,135,-845,-959,-346,-237,389,676,-793,-110,141,-938,-790,-259,874,651,-704,-278,-381,-851,-807,-568,-782,-202,-1000,-749,612,781,345,184,-357,985,978,49,-548,993,-768,281,-926,417,793,-538,716,426,269,114,484,649,871,559,587,-754,968,-973,235,206,367,51,-405,-861,-231,-467,-76,-753,-168,-370,778,754,-438,251,400,439,83,914,730,-884,-801,-28,855,511,939,756,41,945,-353,-279,72,821,148,746,614,639,323,361,-651,-511,-826,-300,-91,-496,105,-46,710,-335,-653,-934,513,-157,570,-555,-843,-809,-349,209,831,-205,-933,-689,238,-799,-284,-6,687,460,-972,541,-888,122,-327,-900,22,966,-604,-595,517,369,394,736,-190,-386,599,270,547,-446,703,301,-282,133,-185,-276,-418,-483,-663,-129,879,395,-617,936,-614,815,132,-313,-150,39,290,-891,-560,-596,351,891,-991,455,-875,799,357,123,-716,375,-779,683,-979,-725,557,629,635,278,-718,-267,593,265,-976,-390,-360,534,-644,155,854,-288,923,43,638,261,-794,-859,-324,805,-766,536,423,77,481,-829,641,-444,-759,-120,263,-940,-533,-417,257,-657,-356,-969,186,140,-5,280,-956,418,-2,-785,296,422,284,539,-672,86,414,876,-66,-834,112,170,240,-304,976,-611,428,100,-84,780,-43,67,-316,-155,69,-336,46,550,134,409,-675,894,689,868,-797,-238,431,766,-140,646,-413,-26,332,908,343,590,-298,-454,330,875,-149,572,-332,-515,529,-913,680,-297,99,-218,-978,-863,-51,-246,694,-101,895,-342,-619,-558,-876,-379,185,613,-700,-982,566,603,-708,-268,659,880,688,-408,665,13,-921,-894,507,709,239,856,-983,-601,652,-698,-92,-762,-400,-116,682,707,-554,537,-854,784,305,-151,-813,-319,450,-939,-403,625,-261,-764,415,-201,489,-643,248,312,-594,199,562,-345,-224,-664,569,943,-855,-490,-95,-836,-923,622,30,71,17,-132,353,-860,-430,577,-848,-512,307,-610,911,-67,192,734,-493,475,-993,-825,-853,-25,-258,474,-421,45,-320,-830,435,-495,16,271,391,-833,50,-125,-907,692,865,-593,606,763,-404,958,-465,829,20,-761,-369,461,183,29,212,-133,-690,-497,-130,-229,403,-691,260,-955,303,-136,-188,-803,825,-71,472,442,-528,980,512,-260,-383,-330,118,144,-178,-569,201,961,802,-684,-145,-695,640,-709,-148,486,-344,-961,362,-112,-656,-152,124,991,497,-746,568,373,752,-587,-513,-878,339,787,-210,938,-795,-367,812,698,412,166,-737,-804,-773,129,-429,308,-770,714,-81,-240,-893,103,909,-757,370,-676,-387,268,-624,113,-556,-787,-890,-713,960,509,927,-364,947,-62,-239,598,473,285,-588,-981,903,-410,81,-881,-579,216,-427,-88,-318,-22,-416,-724,-992,175,-648,-215,-717,145,818,-361,975,695,-626,-911,813,797,-172,748,-135,468,-995,-222,359,-865,930,926,151,496,-977,-880,35,-731,-831,558,396,-184,-42,453,609,-776,-255,-901,230,601,336,-55,946,-744,-747,368,-669,672,969,-236,-385,-328,-602,-108,-198,-521,-814,319,398,111,-321,967,-273,771,347,808,289,443,-339,-484,-39,14,149,-916,-481,-597,-176,-393,-902,172,-927,-134,-443,-104,860,-659,226,-420,-394,-234,-658,-912,-507,213,399,-792,-999,344,583,58,334,-791,-920,775,-925,935,605,25,499,628,712,9,553,858,-564,-197,532,27,-90,-292,-74,-373,-343,662,769,420,-372,-780,173,658,-910,789,130,-811,575,5,-123,390,-468,-31,429,365,526,-93,-908,-711,317,904,-380,-844,522,-889,502,795};
    cout << countOperationsToEmptyArray(nums) << endl;
    return 0;
}